// Deploy script for NERO testnet using ethers.js
require('dotenv').config();
const fs = require('fs');
const ethers = require('ethers');
const path = require('path');

async function main() {
  try {
    console.log('Starting direct deployment to NERO testnet');
    
    // Load contract artifact (generated by hardhat compile)
    const contractPath = path.resolve(__dirname, 'artifacts/contracts/GeneFlowEncryptedData.sol/GeneFlowEncryptedData.json');
    
    if (!fs.existsSync(contractPath)) {
      console.error(`Contract artifact not found at ${contractPath}. Please run 'npx hardhat compile' first.`);
      return;
    }
    
    const contractJson = JSON.parse(
      fs.readFileSync(contractPath, 'utf8')
    );
    
    // Connect to NERO testnet
    const provider = new ethers.JsonRpcProvider('https://rpc-testnet.nerochain.io');
    
    // Get wallet from private key
    const privateKey = process.env.PRIVATE_KEY;
    if (!privateKey) {
      console.error('Error: PRIVATE_KEY not found in environment variables');
      return;
    }
    
    const wallet = new ethers.Wallet(privateKey, provider);
    console.log(`Connected with wallet address: ${wallet.address}`);
    
    // Check wallet balance
    const balance = await provider.getBalance(wallet.address);
    console.log(`Wallet balance: ${ethers.formatEther(balance)} NERO`);
    
    if (balance === 0n) {
      console.error('Error: Wallet has zero balance. Cannot deploy contract.');
      console.log('Please get NERO testnet tokens from the faucet at https://faucet.nerochain.io');
      return;
    }
    
    // Deploy contract
    console.log('Deploying GeneFlowEncryptedData contract to NERO testnet...');
    const factory = new ethers.ContractFactory(
      contractJson.abi,
      contractJson.bytecode,
      wallet
    );
    
    const contract = await factory.deploy();
    console.log('Transaction sent. Waiting for confirmation...');
    
    await contract.deploymentTransaction().wait();
    const contractAddress = await contract.getAddress();
    console.log(`Contract deployed successfully to: ${contractAddress}`);
    console.log(`NEXT_PUBLIC_NERO_CONTRACT_ADDRESS=${contractAddress}`);
    
    // Save to config file for frontend
    const configPath = path.resolve(__dirname, '../src/contract-config.js');
    
    // Read current config if it exists
    let configContent = `
/**
 * Contract configuration for different networks
 */

const contractConfig = {
  // NERO Testnet
  nero: {
    contractAddress: "${contractAddress}",
    chainId: 689,
    rpcUrl: "https://rpc-testnet.nerochain.io",
    blockExplorer: "https://testnet.neroscan.io",
    networkName: "NERO Testnet"
  }
};

export default contractConfig;`;
    
    // If config file exists, update just the contract address
    if (fs.existsSync(configPath)) {
      const currentConfig = fs.readFileSync(configPath, 'utf8');
      // Replace contract address in existing config
      configContent = currentConfig.replace(
        /contractAddress: "0x[a-fA-F0-9]+"/,
        `contractAddress: "${contractAddress}"`
      );
    }
    
    fs.writeFileSync(configPath, configContent);
    
    console.log('Deployment complete! Contract address saved to contract-config.js');
    console.log('\nTo verify the contract on NERO testnet explorer:');
    console.log(`1. Go to https://testnet.neroscan.io/address/${contractAddress}`);
    console.log('2. Click on "Code" tab then "Verify & Publish"');
    console.log('3. Fill in the verification details with:');
    console.log('   - Compiler Version: v0.8.26+commit.6cad0df6');
    console.log('   - Open Source License Type: MIT');
    console.log('   - Optimization: Yes with 200 runs');
    console.log('   - viaIR: disabled');
    console.log('4. Upload the flattened contract code from flattened.sol');
    
  } catch (error) {
    console.error('Deployment failed:', error);
  }
}

main(); 