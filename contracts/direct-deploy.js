// Direct deployment script using ethers.js without relying on Hardhat CLI
require('dotenv').config();
const fs = require('fs');
const ethers = require('ethers');

async function main() {
  try {
    console.log('Starting direct deployment to Flow testnet');
    
    // Load contract artifact (generated by hardhat compile)
    const contractJson = JSON.parse(
      fs.readFileSync('./artifacts/contracts/GeneFlowEncryptedData.sol/GeneFlowEncryptedData.json', 'utf8')
    );
    
    // Connect to Flow testnet
    const provider = new ethers.JsonRpcProvider('https://testnet.evm.nodes.onflow.org');
    
    // Get wallet from private key
    const privateKey = process.env.PRIVATE_KEY;
    const wallet = new ethers.Wallet(privateKey, provider);
    console.log(`Connected with wallet address: ${wallet.address}`);
    
    // Check wallet balance
    const balance = await provider.getBalance(wallet.address);
    console.log(`Wallet balance: ${ethers.formatEther(balance)} FLOW`);
    
    if (balance === 0n) {
      console.error('Error: Wallet has zero balance. Cannot deploy contract.');
      return;
    }
    
    // Deploy contract
    console.log('Deploying GeneFlowEncryptedData contract...');
    const factory = new ethers.ContractFactory(
      contractJson.abi,
      contractJson.bytecode,
      wallet
    );
    
    const contract = await factory.deploy();
    console.log('Transaction sent. Waiting for confirmation...');
    
    await contract.deploymentTransaction().wait();
    console.log(`Contract deployed successfully to: ${await contract.getAddress()}`);
    console.log(`NEXT_PUBLIC_CONTRACT_ADDRESS=${await contract.getAddress()}`);
    
    // Save to config file for frontend
    fs.writeFileSync('../contract-config.json', JSON.stringify({
      contractAddress: await contract.getAddress(),
      chainId: 545,
      contractName: 'GeneFlowEncryptedData'
    }, null, 2));
    
    console.log('Deployment complete! Contract address saved to contract-config.json');
  } catch (error) {
    console.error('Deployment failed:', error);
  }
}

main(); 